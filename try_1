from fastapi import FastAPI, File, UploadFile
from fastapi.responses import JSONResponse
import uvicorn
import cv2
import numpy as np
import torch
import time
import os
import json
from datetime import datetime
from fast_plate_ocr import LicensePlateRecognizer

app = FastAPI()

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
yolo_model = torch.hub.load('ultralytics/yolov5', 'custom', path='best_5n.pt', force_reload=True)
yolo_model.to(device).eval()


# Load OCR model
plate_recognizer = LicensePlateRecognizer(
    onnx_model_path="ckpt-epoch_12-acc_0.950.onnx",
    plate_config_path="cct_xs_v1_global_plate_config.yaml",
)

# Hàm đọc ảnh
def read_imagefile(file) -> np.ndarray:
    file_bytes = np.asarray(bytearray(file.read()), dtype=np.uint8)
    image = cv2.imdecode(file_bytes, cv2.IMREAD_COLOR)
    return image

# Hàm lưu JSONL
def save_to_jsonl(data, timing, filename="prediction.jsonl"):
    os.makedirs("logs", exist_ok=True)
    filepath = os.path.join("logs", filename)
    with open(filepath, "a", encoding="utf-8") as f:
        for item in data:
            record = {
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "plate": item["plate"],
                "box": item["box"],
                "vehicle_type": item["vehicle_type"],
                "timing": item["timing"],
                "overall": timing
            }
            f.write(json.dumps(record, ensure_ascii=False) + "\n")

@app.post("/predict")
async def predict(image: UploadFile = File(...)):
    total_start = time.time()

    # Đọc ảnh
    decode_start = time.time()
    img = read_imagefile(image.file)
    decode_duration = time.time() - decode_start

    # Dự đoán với YOLO
    yolo_start = time.time()
    results = yolo_model(img)
    yolo_duration = time.time() - yolo_start

    df = results.pandas().xyxy[0]
    if df.empty:
        return JSONResponse(status_code=404, content={"message": "Không phát hiện đối tượng nào."})

    output = []

    for idx, row in df.iterrows():
        crop_start = time.time()
        x1, y1, x2, y2 = map(int, [row['xmin'], row['ymin'], row['xmax'], row['ymax']])
        cls_id = int(row['class'])

        cropped_plate = img[y1:y2, x1:x2]
        crop_duration = time.time() - crop_start

        ocr_start = time.time()
        plate_text = plate_recognizer.run(cropped_plate)
        ocr_duration = time.time() - ocr_start

        vehicle_type = "car" if cls_id == 1 else "motorbike"

        output.append({
            "plate": plate_text,
            "box": [x1, y1, x2, y2],
            "vehicle_type": vehicle_type,
            "timing": {
                "crop": f"{crop_duration:.3f}",
                "ocr": f"{ocr_duration:.3f}"
            }
        })


    total_duration = time.time() - total_start

    # Ghi file log JSONL
    overall_timing = {
        "decode": f"{decode_duration:.3f}",
        "yolo": f"{yolo_duration:.3f}",
        "total": f"{total_duration:.3f}"
    }
    save_to_jsonl(output, overall_timing)

    return {
        "results": [
            {
                "plate": item["plate"],
                "box": item["box"],
                "vehicle_type": item["vehicle_type"]
            }
            for item in output
        ]
    }

if __name__ == "__main__":
    uvicorn.run("try:app", host="0.0.0.0", port=8000, reload=False)
